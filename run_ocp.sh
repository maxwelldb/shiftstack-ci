#!/usr/bin/env bash

set -e

CONFIG=${CONFIG:-cluster_config.sh}
if [ ! -r "$CONFIG" ]; then
    echo "Could not find cluster configuration file."
    echo "Make sure $CONFIG file exists in the shiftstack-ci directory and that it is readable"
    exit 1
fi
source ${CONFIG}

set -x

declare -r installer="${OPENSHIFT_INSTALLER:-$GOPATH/src/github.com/openshift/installer/bin/openshift-install}"

declare psi_public='no'
declare -r \
	redhat_api_network=c281fd91-040b-408e-a375-609b1bef3e33 \
	psi_public_external_network=82b71693-a5ad-4d89-9c7d-ddfa9cc798f0 \

if openstack network show "$redhat_api_network" >/dev/null 2>&1; then
	echo 'Installing on PSI-public; using bring-your-own-network.'
	psi_public='yes'
fi

teardown_psi_public() {
	declare -r \
		infra_id="$1" \
		name="byon-${1}"

	openstack port delete "$name"
	openstack router delete "${name}-rh-api"

	openstack router unset --route destination="10.5.204.1/32,gateway=10.0.128.2" "$name"
	openstack router unset --route destination="10.5.201.114/32,gateway=10.0.128.2" "$name"
	openstack router unset --route destination="10.5.201.75/32,gateway=10.0.128.2" "$name"

	openstack router remove subnet "$name" "$name"
	openstack router delete "$name"

	openstack subnet delete "$name"
	openstack network delete "$name"
}

prepare_psi_public() {
	declare -r \
		infra_id="$1" \
		name="byon-${1}" \
		external_network="${2}"

	declare \
		network_id='' \
		subnet_id='' \
		router_id='' \
		port_id='' \
		api_router_id=''

	network_id="$(openstack network create -f value -c id \
		--tag "openshiftClusterID=${infra_id}" \
		$name)"

	subnet_id="$(openstack subnet create -f value -c id \
		--tag "openshiftClusterID=${infra_id}" \
		--subnet-range 10.0.128.0/17 \
		--allocation-pool 'start=10.0.128.10,end=10.0.254.254' \
		--dns-nameserver 10.5.201.114 \
		--dns-nameserver 10.5.201.75 \
		--network "$network_id" \
		$name)"

	router_id="$(openstack router create -f value -c id \
		--tag "openshiftClusterID=${infra_id}" \
		"$name")"

	openstack router add subnet "$router_id" "$subnet_id"
	openstack router set --external-gateway "$external_network" "$router_id"

	# Now we establish connectivity to OpenStack's API, through the network 'redhat-api'

	port_id="$(openstack port create -f value -c id \
		--tag "openshiftClusterID=${infra_id}" \
		--network "$network_id" \
		--fixed-ip "subnet=${subnet_id},ip-address=10.0.128.2" \
		"$name")"

	openstack router set --route destination="10.5.204.1/32,gateway=10.0.128.2" "$router_id"
	openstack router set --route destination="10.5.201.114/32,gateway=10.0.128.2" "$router_id"
	openstack router set --route destination="10.5.201.75/32,gateway=10.0.128.2" "$router_id"

	api_router_id="$(openstack router create -f value -c id \
		--tag "openshiftClusterID=${infra_id}" \
		"$name-rh-api")"

	openstack router set --external-gateway "$redhat_api_network" "$api_router_id"
	printf "%s" "$subnet_id"
}

declare MACHINES_SUBNET=''
if [[ $psi_public == 'yes' ]]; then
	MACHINES_SUBNET="$(prepare_psi_public "$CLUSTER_NAME" "$psi_public_external_network")"
fi

# check whether we have a free floating IP
FLOATING_IP=$(openstack floating ip list --status DOWN --network $OPENSTACK_EXTERNAL_NETWORK --long --format value -c "Floating IP Address" -c Description | sed 's/ .*//g')
FLOATING_IP=$(echo $FLOATING_IP | cut -d ' ' -f1)

# create new floating ip if doesn't exist
if [ -z "$FLOATING_IP" ]; then
    FLOATING_IP=$(openstack floating ip create $OPENSTACK_EXTERNAL_NETWORK --description "${CLUSTER_NAME}-api" --format value --column floating_ip_address)
fi

hosts="# Generated by shiftstack for $CLUSTER_NAME - Do not edit
$FLOATING_IP api.${CLUSTER_NAME}.${BASE_DOMAIN}
# End of $CLUSTER_NAME nodes"

old_hosts=$(awk "/# Generated by shiftstack for $CLUSTER_NAME - Do not edit/,/# End of $CLUSTER_NAME nodes/" /etc/hosts)

if [ "${hosts}" != "${old_hosts}" ]; then
  echo Updating hosts file
  sudo sed -i "/# Generated by shiftstack for $CLUSTER_NAME - Do not edit/,/# End of $CLUSTER_NAME nodes/d" /etc/hosts
  echo "$hosts" | sudo tee -a /etc/hosts
fi

ssh_config="# Generated by shiftstack for $CLUSTER_NAME - Do not edit
Host service-vm-$CLUSTER_NAME
    Hostname $FLOATING_IP
    User core
    Port 22
    StrictHostKeyChecking no
    UserKnownHostsFile=/dev/null
# End of $CLUSTER_NAME nodes"

old_ssh_config=$(awk "/# Generated by shiftstack for $CLUSTER_NAME - Do not edit/,/# End of $CLUSTER_NAME nodes/" $HOME/.ssh/config)
if [ "${ssh_config}" != "${old_ssh_config}" ]; then
  echo Updating ssh config file
  sed -i "/# Generated by shiftstack for $CLUSTER_NAME - Do not edit/,/# End of $CLUSTER_NAME nodes/d" $HOME/.ssh/config
  echo "$ssh_config" >>  $HOME/.ssh/config
fi

if [ ! -d $CLUSTER_NAME ]; then
    mkdir -p $CLUSTER_NAME
fi

: "${OPENSTACK_WORKER_FLAVOR:=${OPENSTACK_FLAVOR}}"

MASTER_ROOT_VOLUME=""
if [[ ${OPENSTACK_MASTER_VOLUME_TYPE} != "" ]]; then
  MASTER_ROOT_VOLUME="rootVolume:
        size: ${OPENSTACK_MASTER_VOLUME_SIZE:-25}
        type: ${OPENSTACK_MASTER_VOLUME_TYPE}"
fi
WORKER_ROOT_VOLUME=""
if [[ ${OPENSTACK_WORKER_VOLUME_TYPE} != "" ]]; then
  WORKER_ROOT_VOLUME="rootVolume:
        size: ${OPENSTACK_WORKER_VOLUME_SIZE:-25}
        type: ${OPENSTACK_WORKER_VOLUME_TYPE}"
fi

if [ ! -f $CLUSTER_NAME/install-config.yaml ]; then
    export CLUSTER_ID=$(uuidgen --random)
    cat > $CLUSTER_NAME/install-config.yaml << EOF
apiVersion: v1
baseDomain: ${BASE_DOMAIN}
clusterID:  ${CLUSTER_ID}
compute:
- name: worker
  platform:
    openstack:
      type: ${OPENSTACK_WORKER_FLAVOR}
      ${WORKER_ROOT_VOLUME}
  replicas: ${WORKER_COUNT}
controlPlane:
  name: master
  platform:
    openstack:
      type: ${OPENSTACK_FLAVOR}
      ${MASTER_ROOT_VOLUME}
  replicas: ${MASTER_COUNT}
metadata:
  name: ${CLUSTER_NAME}
networking:
  clusterNetwork:
  - cidr: 10.128.0.0/14
    hostPrefix: 23
  machineNetwork:
  - cidr: 10.0.128.0/17
  networkType: OpenShiftSDN
  serviceNetwork:
  - 172.30.0.0/16
platform:
  openstack:
    machinesSubnet:   '${MACHINES_SUBNET}'
    cloud:            ${OS_CLOUD}
    externalNetwork:  ${OPENSTACK_EXTERNAL_NETWORK}
    computeFlavor:    ${OPENSTACK_FLAVOR}
    lbFloatingIP:     ${FLOATING_IP}
pullSecret: |
  ${PULL_SECRET}
sshKey: |
  ${SSH_PUB_KEY}
EOF
fi

"$installer" --log-level=debug ${1:-create} ${2:-cluster} --dir $CLUSTER_NAME

# Attaching FIP to ingress port to access the cluster from outside
# check whether we have a free floating IP
INGRESS_PORT=$(openstack port list --format value -c Name | awk "/${CLUSTER_NAME}.*-ingress-port/ {print}")
if [ -n "$INGRESS_PORT" ]; then
  APPS_FLOATING_IP=$(openstack floating ip list --status DOWN --network $OPENSTACK_EXTERNAL_NETWORK --long --format value -c "Floating IP Address" -c Description | awk 'NF<=1 && NR==1 {print}')

  # create new floating ip if doesn't exist
  if [ -z "$APPS_FLOATING_IP" ]; then
      APPS_FLOATING_IP=$(openstack floating ip create $OPENSTACK_EXTERNAL_NETWORK --description "${CLUSTER_NAME}-apps" --format value --column floating_ip_address --port $INGRESS_PORT)
  else
    # attach the port
    openstack floating ip set --port $INGRESS_PORT $APPS_FLOATING_IP
  fi

  hosts="# Generated by shiftstack for $CLUSTER_NAME - Do not edit
  $FLOATING_IP api.${CLUSTER_NAME}.${BASE_DOMAIN}
  $APPS_FLOATING_IP console-openshift-console.apps.${CLUSTER_NAME}.${BASE_DOMAIN}
  $APPS_FLOATING_IP integrated-oauth-server-openshift-authentication.apps.${CLUSTER_NAME}.${BASE_DOMAIN}
  $APPS_FLOATING_IP oauth-openshift.apps.${CLUSTER_NAME}.${BASE_DOMAIN}
  $APPS_FLOATING_IP prometheus-k8s-openshift-monitoring.apps.${CLUSTER_NAME}.${BASE_DOMAIN}
  $APPS_FLOATING_IP grafana-openshift-monitoring.apps.${CLUSTER_NAME}.${BASE_DOMAIN}
  # End of $CLUSTER_NAME nodes"

  old_hosts=$(awk "/# Generated by shiftstack for $CLUSTER_NAME - Do not edit/,/# End of $CLUSTER_NAME nodes/" /etc/hosts)

  if [ "${hosts}" != "${old_hosts}" ]; then
    echo Updating hosts file
    sudo sed -i "/# Generated by shiftstack for $CLUSTER_NAME - Do not edit/,/# End of $CLUSTER_NAME nodes/d" /etc/hosts
    echo "$hosts" | sudo tee -a /etc/hosts
  fi
fi
